type Query {
  getAllPosts: [Post!]!
  getPost(id: ID!): PostEntityResponse!
}

union PostEntityResponse = PostMutationResponse | ErrorResponse | Post

type Mutation {
  createPost(createPostInput: CreatePostInput!): PostEntityResponse! @auth
  updatePost(id: ID!, updatePostInput: UpdatePostInput!): PostEntityResponse!
    @auth
  deletePost(id: ID!): PostEntityResponse! @auth
}

scalar DateTime

type Post {
  id: ID!
  title: String!
  content: String!
  featuredImage: String
  author: User!
  createdAt: DateTime
  updatedAt: DateTime
}

input CreatePostInput {
  title: String!
  content: String!
  featuredImage: String
}

input UpdatePostInput {
  title: String
  content: String
  featuredImage: String
}

type PostMutationResponse {
  code: String!
  success: Boolean!
  message: MutationMessage!
  post: Post
}

enum MutationMessage {
  CREATED
  DELETED
  UPDATED
  FOUND
}
